{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "a2704aec-7eda-481c-8b04-d3350bb678b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: jupyter-dash in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (0.4.2)\n",
      "Requirement already satisfied: dash in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (3.2.0)\n",
      "Requirement already satisfied: plotly in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (5.24.1)\n",
      "Requirement already satisfied: requests in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from jupyter-dash) (2.32.3)\n",
      "Requirement already satisfied: flask in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from jupyter-dash) (3.0.3)\n",
      "Requirement already satisfied: retrying in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from jupyter-dash) (1.4.2)\n",
      "Requirement already satisfied: ipython in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from jupyter-dash) (8.27.0)\n",
      "Requirement already satisfied: ipykernel in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from jupyter-dash) (6.28.0)\n",
      "Requirement already satisfied: ansi2html in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from jupyter-dash) (1.9.2)\n",
      "Requirement already satisfied: nest-asyncio in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from jupyter-dash) (1.6.0)\n",
      "Requirement already satisfied: Werkzeug<3.2 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from dash) (3.0.3)\n",
      "Requirement already satisfied: importlib-metadata in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from dash) (7.0.1)\n",
      "Requirement already satisfied: typing-extensions>=4.1.1 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from dash) (4.11.0)\n",
      "Requirement already satisfied: setuptools in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from dash) (75.1.0)\n",
      "Requirement already satisfied: tenacity>=6.2.0 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from plotly) (8.2.3)\n",
      "Requirement already satisfied: packaging in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from plotly) (24.1)\n",
      "Requirement already satisfied: Jinja2>=3.1.2 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from flask->jupyter-dash) (3.1.4)\n",
      "Requirement already satisfied: itsdangerous>=2.1.2 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from flask->jupyter-dash) (2.2.0)\n",
      "Requirement already satisfied: click>=8.1.3 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from flask->jupyter-dash) (8.1.7)\n",
      "Requirement already satisfied: blinker>=1.6.2 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from flask->jupyter-dash) (1.6.2)\n",
      "Requirement already satisfied: MarkupSafe>=2.1.1 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from Werkzeug<3.2->dash) (2.1.3)\n",
      "Requirement already satisfied: zipp>=0.5 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from importlib-metadata->dash) (3.17.0)\n",
      "Requirement already satisfied: comm>=0.1.1 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipykernel->jupyter-dash) (0.2.1)\n",
      "Requirement already satisfied: debugpy>=1.6.5 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipykernel->jupyter-dash) (1.6.7)\n",
      "Requirement already satisfied: jupyter-client>=6.1.12 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipykernel->jupyter-dash) (8.6.0)\n",
      "Requirement already satisfied: jupyter-core!=5.0.*,>=4.12 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipykernel->jupyter-dash) (5.7.2)\n",
      "Requirement already satisfied: matplotlib-inline>=0.1 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipykernel->jupyter-dash) (0.1.6)\n",
      "Requirement already satisfied: psutil in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipykernel->jupyter-dash) (5.9.0)\n",
      "Requirement already satisfied: pyzmq>=24 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipykernel->jupyter-dash) (25.1.2)\n",
      "Requirement already satisfied: tornado>=6.1 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipykernel->jupyter-dash) (6.4.1)\n",
      "Requirement already satisfied: traitlets>=5.4.0 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipykernel->jupyter-dash) (5.14.3)\n",
      "Requirement already satisfied: decorator in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipython->jupyter-dash) (5.1.1)\n",
      "Requirement already satisfied: jedi>=0.16 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipython->jupyter-dash) (0.19.1)\n",
      "Requirement already satisfied: prompt-toolkit<3.1.0,>=3.0.41 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipython->jupyter-dash) (3.0.43)\n",
      "Requirement already satisfied: pygments>=2.4.0 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipython->jupyter-dash) (2.15.1)\n",
      "Requirement already satisfied: stack-data in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipython->jupyter-dash) (0.2.0)\n",
      "Requirement already satisfied: colorama in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from ipython->jupyter-dash) (0.4.6)\n",
      "Requirement already satisfied: charset-normalizer<4,>=2 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from requests->jupyter-dash) (3.3.2)\n",
      "Requirement already satisfied: idna<4,>=2.5 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from requests->jupyter-dash) (3.7)\n",
      "Requirement already satisfied: urllib3<3,>=1.21.1 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from requests->jupyter-dash) (2.2.3)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from requests->jupyter-dash) (2024.12.14)\n",
      "Requirement already satisfied: parso<0.9.0,>=0.8.3 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from jedi>=0.16->ipython->jupyter-dash) (0.8.3)\n",
      "Requirement already satisfied: python-dateutil>=2.8.2 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from jupyter-client>=6.1.12->ipykernel->jupyter-dash) (2.9.0.post0)\n",
      "Requirement already satisfied: platformdirs>=2.5 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from jupyter-core!=5.0.*,>=4.12->ipykernel->jupyter-dash) (3.10.0)\n",
      "Requirement already satisfied: pywin32>=300 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from jupyter-core!=5.0.*,>=4.12->ipykernel->jupyter-dash) (305.1)\n",
      "Requirement already satisfied: wcwidth in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from prompt-toolkit<3.1.0,>=3.0.41->ipython->jupyter-dash) (0.2.5)\n",
      "Requirement already satisfied: executing in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from stack-data->ipython->jupyter-dash) (0.8.3)\n",
      "Requirement already satisfied: asttokens in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from stack-data->ipython->jupyter-dash) (2.0.5)\n",
      "Requirement already satisfied: pure-eval in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from stack-data->ipython->jupyter-dash) (0.2.2)\n",
      "Requirement already satisfied: six>=1.5 in c:\\users\\zacha\\onedrive\\documents\\qamo_3100\\lib\\site-packages (from python-dateutil>=2.8.2->jupyter-client>=6.1.12->ipykernel->jupyter-dash) (1.16.0)\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'super' object has no attribute 'run_server'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[33], line 404\u001b[0m\n\u001b[0;32m    400\u001b[0m \u001b[38;5;66;03m# ==========================================================\u001b[39;00m\n\u001b[0;32m    401\u001b[0m \u001b[38;5;66;03m# Run inline in Jupyter\u001b[39;00m\n\u001b[0;32m    402\u001b[0m \u001b[38;5;66;03m# ==========================================================\u001b[39;00m\n\u001b[0;32m    403\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;18m__name__\u001b[39m \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m__main__\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n\u001b[1;32m--> 404\u001b[0m     app\u001b[38;5;241m.\u001b[39mrun_server(debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, host\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124m0.0.0.0\u001b[39m\u001b[38;5;124m\"\u001b[39m, port\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m8050\u001b[39m)\n",
      "File \u001b[1;32m~\\OneDrive\\Documents\\QAMO_3100\\Lib\\site-packages\\jupyter_dash\\jupyter_app.py:176\u001b[0m, in \u001b[0;36mJupyterDash.run_server\u001b[1;34m(self, mode, width, height, inline_exceptions, **kwargs)\u001b[0m\n\u001b[0;32m    154\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    155\u001b[0m \u001b[38;5;124;03mServe the app using flask in a background thread. You should not run this on a\u001b[39;00m\n\u001b[0;32m    156\u001b[0m \u001b[38;5;124;03mproduction server, use gunicorn/waitress instead.\u001b[39;00m\n\u001b[1;32m   (...)\u001b[0m\n\u001b[0;32m    173\u001b[0m \u001b[38;5;124;03m    ``Dash.run_server`` method.\u001b[39;00m\n\u001b[0;32m    174\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[0;32m    175\u001b[0m \u001b[38;5;66;03m# Get superclass run_server method\u001b[39;00m\n\u001b[1;32m--> 176\u001b[0m super_run_server \u001b[38;5;241m=\u001b[39m \u001b[38;5;28msuper\u001b[39m(JupyterDash, \u001b[38;5;28mself\u001b[39m)\u001b[38;5;241m.\u001b[39mrun_server\n\u001b[0;32m    178\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m JupyterDash\u001b[38;5;241m.\u001b[39m_in_ipython:\n\u001b[0;32m    179\u001b[0m     \u001b[38;5;66;03m# If not in IPython context, call run run_server synchronously\u001b[39;00m\n\u001b[0;32m    180\u001b[0m     super_run_server(\u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'super' object has no attribute 'run_server'"
     ]
    }
   ],
   "source": [
    "# ==========================================================\n",
    "# Install dependencies\n",
    "# ==========================================================\n",
    "!pip install jupyter-dash dash plotly\n",
    "\n",
    "# ==========================================================\n",
    "# Imports\n",
    "# ==========================================================\n",
    "from jupyter_dash import JupyterDash\n",
    "from dash import dcc, html, Input, Output\n",
    "import plotly.graph_objects as go\n",
    "import numpy as np\n",
    "import math, base64, random\n",
    "\n",
    "# ==========================================================\n",
    "# Hierarchy definition\n",
    "# ==========================================================\n",
    "children_map = {\n",
    "    \"Identity\": [\"Culture\", \"Purpose\"],\n",
    "    \"Accountability\": [\"Business Context\", \"Strategy\"],\n",
    "    \" Capability\": [\"Organization\", \"Talent\"],\n",
    "}\n",
    "\n",
    "grandchildren_map = {\n",
    "    \"Culture\": [\"Mindset\", \"Climate\"],\n",
    "    \"Purpose\": [\"Mission\", \"Vision\"],\n",
    "    \"Business Context\": [\"Market\", \"Society\"],\n",
    "    \"Strategy\": [\"Goals\", \"Challenges\"],\n",
    "    \"Organization\": [\"Structure\", \"Processes\"],\n",
    "    \"Talent\": [\"Leadership\", \"Employees\"],\n",
    "}\n",
    "\n",
    "# ==========================================================\n",
    "# Colors (you can adjust to match your exact palette)\n",
    "# ==========================================================\n",
    "colors = {\n",
    "    \"Identity\": \"#0D2240\",\n",
    "    \"Accountability\": \"#007EA8\",\n",
    "    \" Capability\": \"#3A9D23\",\n",
    "\n",
    "    \"Culture\": \"#13293D\",\n",
    "    \"Purpose\": \"#006494\",\n",
    "    \"Business Context\": \"#0097A7\",\n",
    "    \"Strategy\": \"#00ACC1\",\n",
    "    \"Organization\": \"#81C784\",\n",
    "    \"Talent\": \"#66BB6A\",\n",
    "\n",
    "    \"Mindset\": \"#1B4353\",\n",
    "    \"Climate\": \"#1E656D\",\n",
    "    \"Mission\": \"#005073\",\n",
    "    \"Vision\": \"#247BA0\",\n",
    "    \"Market\": \"#4DD0E1\",\n",
    "    \"Society\": \"#80DEEA\",\n",
    "    \"Goals\": \"#00BCD4\",\n",
    "    \"Challenges\": \"#B2EBF2\",\n",
    "    \"Structure\": \"#A5D6A7\",\n",
    "    \"Processes\": \"#C8E6C9\",\n",
    "    \"Leadership\": \"#AED581\",\n",
    "    \"Employees\": \"#C5E1A5\",\n",
    "}\n",
    "\n",
    "placeholder_color = \"#E0E0E0\"\n",
    "\n",
    "# ==========================================================\n",
    "# Definitions (hover text for grandchildren)\n",
    "# ==========================================================\n",
    "definitions = {\n",
    "    \"Mindset\": \"The shared attitudes and assumptions within the organization.\",\n",
    "    \"Climate\": \"The daily experience and tone of the workplace.\",\n",
    "    \"Mission\": \"The core purpose of why the organization exists.\",\n",
    "    \"Vision\": \"The aspirational future the organization strives toward.\",\n",
    "    \"Market\": \"External economic and competitive environment.\",\n",
    "    \"Society\": \"The social and regulatory context influencing the business.\",\n",
    "    \"Goals\": \"The strategic outcomes the organization pursues.\",\n",
    "    \"Challenges\": \"The key barriers or risks to achieving objectives.\",\n",
    "    \"Structure\": \"The organization’s hierarchy and reporting relationships.\",\n",
    "    \"Processes\": \"The systems, workflows, and procedures in place.\",\n",
    "    \"Leadership\": \"The capabilities and mindset of top leaders.\",\n",
    "    \"Employees\": \"The engagement, skill, and culture of the workforce.\"\n",
    "}\n",
    "\n",
    "# ==========================================================\n",
    "# State tracking\n",
    "# ==========================================================\n",
    "active_cores = set()\n",
    "active_children = set()\n",
    "active_grandchildren = set()\n",
    "# ==========================================================\n",
    "# Figure builder\n",
    "# ==========================================================\n",
    "def build_figure():\n",
    "    fig = go.Figure()\n",
    "\n",
    "    # --------------------------\n",
    "    # Ring geometry\n",
    "    # --------------------------\n",
    "    R_outer = 0.48\n",
    "    hole_fraction = 0.35\n",
    "    R_hole = R_outer * hole_fraction\n",
    "    n_rings = 3\n",
    "    band = (R_outer - R_hole) / n_rings\n",
    "\n",
    "    # Radii\n",
    "    R1, r1_in = R_hole + band, R_hole\n",
    "    R2, r2_in = R_hole + 2 * band, R1\n",
    "    R3, r3_in = R_outer, R2\n",
    "    hole1, hole2, hole3 = r1_in / R1, r2_in / R2, r3_in / R3\n",
    "\n",
    "    def domain_from_radius(R):\n",
    "        return {\"x\": [0.5 - R, 0.5 + R], \"y\": [0.5 - R, 0.5 + R]}\n",
    "    dom1, dom2, dom3 = map(domain_from_radius, (R1, R2, R3))\n",
    "\n",
    "    core_labels = list(children_map.keys())\n",
    "    core_colors = [colors[l] for l in core_labels]\n",
    "\n",
    "    # --------------------------\n",
    "    # Core ring\n",
    "    # --------------------------\n",
    "    fig.add_trace(go.Pie(\n",
    "        labels=core_labels,\n",
    "        values=[120] * 3,\n",
    "        hole=hole1,\n",
    "        marker=dict(colors=core_colors, line=dict(color=\"white\", width=2)),\n",
    "        textinfo=\"none\",\n",
    "        sort=False,\n",
    "        direction=\"clockwise\",\n",
    "        rotation=90,\n",
    "        name=\"Core\",\n",
    "        domain=dom1,\n",
    "        hoverinfo=\"skip\"\n",
    "    ))\n",
    "\n",
    "    # --------------------------\n",
    "    # Children & grandchildren\n",
    "    # --------------------------\n",
    "    ring2_labels, ring2_colors, ring3_labels, ring3_colors = [], [], [], []\n",
    "    for core in core_labels:\n",
    "        for child in children_map[core]:\n",
    "            if core in active_cores:\n",
    "                ring2_labels.append(child)\n",
    "                ring2_colors.append(colors[child])\n",
    "            else:\n",
    "                ring2_labels.append(\"\")\n",
    "                ring2_colors.append(placeholder_color)\n",
    "\n",
    "            for gc in grandchildren_map[child]:\n",
    "                if child in active_children:\n",
    "                    ring3_labels.append(gc)\n",
    "                    ring3_colors.append(colors[gc])\n",
    "                else:\n",
    "                    ring3_labels.append(\"\")\n",
    "                    ring3_colors.append(placeholder_color)\n",
    "\n",
    "    # Child ring\n",
    "    fig.add_trace(go.Pie(\n",
    "        labels=ring2_labels,\n",
    "        values=[60] * 6,\n",
    "        hole=hole2,\n",
    "        marker=dict(colors=ring2_colors, line=dict(color=\"white\", width=1)),\n",
    "        textinfo=\"none\",\n",
    "        sort=False,\n",
    "        direction=\"clockwise\",\n",
    "        rotation=90,\n",
    "        name=\"Children\",\n",
    "        domain=dom2,\n",
    "        hoverinfo=\"skip\"\n",
    "    ))\n",
    "    # --------------------------\n",
    "    # Grandchildren ring (with hover labels)\n",
    "    # --------------------------\n",
    "    ring3_labels, ring3_colors, hovertemplates = [], [], []\n",
    "    for core in core_labels:\n",
    "        for child in children_map[core]:\n",
    "            for gc in grandchildren_map[child]:\n",
    "                if child in active_children:\n",
    "                    # Active — show colored slice and definition\n",
    "                    ring3_labels.append(gc)\n",
    "                    ring3_colors.append(colors[gc])\n",
    "                    hovertemplates.append(\n",
    "                        f\"<b>{gc}</b><br>{definitions.get(gc, '')}<extra></extra>\"\n",
    "                    )\n",
    "                else:\n",
    "                    # Inactive — show placeholder color, but still hover name\n",
    "                    ring3_labels.append(gc)\n",
    "                    ring3_colors.append(placeholder_color)\n",
    "                    hovertemplates.append(f\"<b>{gc}</b><extra></extra>\")\n",
    "\n",
    "    fig.add_trace(go.Pie(\n",
    "        labels=ring3_labels,\n",
    "        values=[30] * len(ring3_labels),\n",
    "        hole=hole3,\n",
    "        marker=dict(colors=ring3_colors, line=dict(color=\"white\", width=1)),\n",
    "        textinfo=\"none\",\n",
    "        sort=False,\n",
    "        direction=\"clockwise\",\n",
    "        rotation=90,\n",
    "        name=\"Grandchildren\",\n",
    "        domain=dom3,\n",
    "        hoverinfo=\"none\",\n",
    "        hovertemplate=hovertemplates\n",
    "    ))\n",
    "\n",
    "\n",
    "\n",
    "    # --------------------------\n",
    "    # Curved labels setup\n",
    "    # --------------------------\n",
    "    cx, cy, scale = 500.0, 500.0, 1000.0\n",
    "    r_core_px = ((R1 + r1_in) / 2.0) * scale\n",
    "    r_children_px = ((R2 + r2_in) / 2.0) * scale\n",
    "    r_gc_px = ((R3 + r3_in) / 2.0) * scale\n",
    "\n",
    "    def svg_arc_path(r, start_deg, end_deg):\n",
    "        sr, er = math.radians(start_deg), math.radians(end_deg)\n",
    "        x0, y0 = cx + r * math.cos(sr), cy - r * math.sin(sr)\n",
    "        x1, y1 = cx + r * math.cos(er), cy - r * math.sin(er)\n",
    "        delta = (start_deg - end_deg) % 360\n",
    "        large_arc = 1 if delta > 180 else 0\n",
    "        return f\"M {x0:.2f},{y0:.2f} A {r:.2f},{r:.2f} 0 {large_arc} 1 {x1:.2f},{y1:.2f}\"\n",
    "\n",
    "    def arc_len(r, start, end):\n",
    "        return r * abs((start - end) * math.pi / 180.0)\n",
    "\n",
    "    def font_size_for(text, arclen, base=18, min_px=11, max_px=28):\n",
    "        if not text:\n",
    "            return 0\n",
    "        est = arclen / (0.6 * len(text))\n",
    "        return max(min_px, min(max_px, est, base))\n",
    "\n",
    "    def shrink_span(start, end, factor=0.5):\n",
    "        span = start - end\n",
    "        return start - span * (1 - factor) / 2, end + span * (1 - factor) / 2\n",
    "\n",
    "    # --------------------------\n",
    "    # Label placement angles\n",
    "    # --------------------------\n",
    "    def assign_angles():\n",
    "        CORE_OFFSET = 270\n",
    "        CHILD_OFFSET = 2.5\n",
    "        angles = {}\n",
    "        for i, core in enumerate(core_labels):\n",
    "            c_start, c_end = 90 - i * 120 + CORE_OFFSET, 90 - (i + 1) * 120 + CORE_OFFSET\n",
    "            angles[core] = (c_start, c_end)\n",
    "            children = children_map[core]\n",
    "            span = (c_start - c_end) / len(children)\n",
    "            for j, child in enumerate(children):\n",
    "                ch_start = c_start - j * span + CHILD_OFFSET\n",
    "                ch_end = c_start - (j + 1) * span + CHILD_OFFSET\n",
    "                angles[child] = (ch_start, ch_end)\n",
    "                gchildren = grandchildren_map[child]\n",
    "                gspan = (ch_start - ch_end) / len(gchildren)\n",
    "                for k, gc in enumerate(gchildren):\n",
    "                    gc_start = ch_start - k * gspan\n",
    "                    gc_end = ch_start - (k + 1) * gspan\n",
    "                    angles[gc] = (gc_start, gc_end)\n",
    "        return angles\n",
    "\n",
    "    angles = assign_angles()\n",
    "    svg_defs, svg_text = [], []\n",
    "\n",
    "    for core in core_labels:\n",
    "        start, end = angles[core]\n",
    "        s, e = shrink_span(start, end, factor=0.7)\n",
    "        path_id = f\"core_{core}\"\n",
    "        svg_defs.append(f'<path id=\"{path_id}\" d=\"{svg_arc_path(r_core_px, s, e)}\" fill=\"none\"/>')\n",
    "        fs = font_size_for(core, arc_len(r_core_px, s, e), base=36) * 1.4\n",
    "        svg_text.append(\n",
    "            f'<text fill=\"white\" font-family=\"Arial\" font-size=\"{fs:.1f}\" font-weight=\"700\">'\n",
    "            f'<textPath href=\"#{path_id}\" startOffset=\"50%\" text-anchor=\"middle\">{core.upper()}</textPath></text>'\n",
    "        )\n",
    "\n",
    "    for child in ring2_labels:\n",
    "        if not child:\n",
    "            continue\n",
    "        start, end = angles[child]\n",
    "        s, e = shrink_span(start, end, factor=0.6)\n",
    "        path_id = f\"child_{child}\"\n",
    "        svg_defs.append(f'<path id=\"{path_id}\" d=\"{svg_arc_path(r_children_px, s, e)}\" fill=\"none\"/>')\n",
    "        fs = font_size_for(child, arc_len(r_children_px, s, e), base=20)\n",
    "        svg_text.append(\n",
    "            f'<text fill=\"white\" font-family=\"Arial\" font-size=\"{fs:.1f}\" font-weight=\"600\">'\n",
    "            f'<textPath href=\"#{path_id}\" startOffset=\"50%\" text-anchor=\"middle\">{child}</textPath></text>'\n",
    "        )\n",
    "\n",
    "    for gc in ring3_labels:\n",
    "        if not gc:\n",
    "            continue\n",
    "        start, end = angles[gc]\n",
    "        s, e = shrink_span(start, end, factor=0.6)\n",
    "        path_id = f\"gc_{gc}\"\n",
    "        svg_defs.append(f'<path id=\"{path_id}\" d=\"{svg_arc_path(r_gc_px, s, e)}\" fill=\"none\"/>')\n",
    "        fs = font_size_for(gc, arc_len(r_gc_px, s, e), base=16, max_px=20)\n",
    "        svg_text.append(\n",
    "            f'<text fill=\"white\" font-family=\"Arial\" font-size=\"{fs:.1f}\" font-weight=\"500\">'\n",
    "            f'<textPath href=\"#{path_id}\" startOffset=\"50%\" text-anchor=\"middle\">{gc}</textPath></text>'\n",
    "        )\n",
    "\n",
    "    svg = (\n",
    "        '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1000\" height=\"1000\" '\n",
    "        'viewBox=\"0 0 1000 1000\" style=\"pointer-events:none\">'\n",
    "        f'<defs>{\"\".join(svg_defs)}</defs><g>{\"\".join(svg_text)}</g></svg>'\n",
    "    )\n",
    "    svg_b64 = base64.b64encode(svg.encode(\"utf-8\")).decode(\"ascii\")\n",
    "\n",
    "    # --------------------------\n",
    "    # Layout images (SVG + center graphic)\n",
    "    # --------------------------\n",
    "    fig.update_layout(images=[\n",
    "        dict(\n",
    "            source=f\"data:image/svg+xml;base64,{svg_b64}\",\n",
    "            xref=\"paper\", yref=\"paper\",\n",
    "            x=0, y=1, sizex=1, sizey=1,\n",
    "            xanchor=\"left\", yanchor=\"top\", layer=\"above\"\n",
    "        ),\n",
    "        # ==========================\n",
    "        # INSERT CENTER GRAPHIC HERE ↓↓↓\n",
    "        # Replace with your PNG path\n",
    "        # ==========================\n",
    "        dict(\n",
    "            source=\"assets/WhatHowWho.png\",\n",
    "            xref=\"paper\", yref=\"paper\",\n",
    "            x=0.5, y=0.5,\n",
    "            sizex=0.35, sizey=0.35,\n",
    "            xanchor=\"center\", yanchor=\"middle\",\n",
    "            layer=\"above\"\n",
    "        )\n",
    "    ])\n",
    "\n",
    "    fig.update_layout(margin=dict(t=40, l=40, r=40, b=40), showlegend=False)\n",
    "    return fig\n",
    "\n",
    "\n",
    "# ==========================================================\n",
    "# DASH APP (JupyterDash)\n",
    "# ==========================================================\n",
    "app = JupyterDash(__name__)\n",
    "\n",
    "app.layout = html.Div([\n",
    "    html.H2(\"Interactive Org Success Profile\", style={\"textAlign\": \"center\"}),\n",
    "    dcc.Graph(id=\"donut\", figure=build_figure(), style={\"height\": \"90vh\"})\n",
    "])\n",
    "\n",
    "@app.callback(\n",
    "    Output(\"donut\", \"figure\"),\n",
    "    Input(\"donut\", \"clickData\")\n",
    ")\n",
    "def update(clickData):\n",
    "    global active_cores, active_children, active_grandchildren\n",
    "    if not clickData:\n",
    "        return build_figure()\n",
    "\n",
    "    clicked = clickData[\"points\"][0][\"label\"]\n",
    "\n",
    "    # --- CASE 1: Core clicked ---\n",
    "    if clicked in children_map:\n",
    "        if clicked in active_cores:\n",
    "            active_cores.remove(clicked)\n",
    "            for c in children_map[clicked]:\n",
    "                active_children.discard(c)\n",
    "            # also clear grandchildren of that core\n",
    "            for c in children_map[clicked]:\n",
    "                for gc in grandchildren_map[c]:\n",
    "                    active_grandchildren.discard(gc)\n",
    "        else:\n",
    "            active_cores.add(clicked)\n",
    "\n",
    "    # --- CASE 2: Child clicked ---\n",
    "    elif clicked in grandchildren_map:\n",
    "        if clicked in active_children:\n",
    "            # deactivate its grandchildren\n",
    "            for gc in grandchildren_map[clicked]:\n",
    "                active_grandchildren.discard(gc)\n",
    "            active_children.remove(clicked)\n",
    "        else:\n",
    "            active_children.add(clicked)\n",
    "\n",
    "    # --- CASE 3: Grandchild clicked ---\n",
    "    else:\n",
    "        parent_child = None\n",
    "        for child, grandkids in grandchildren_map.items():\n",
    "            if clicked in grandkids:\n",
    "                parent_child = child\n",
    "                break\n",
    "\n",
    "        if parent_child:\n",
    "            # ensure its parent child is active\n",
    "            active_children.add(parent_child)\n",
    "            # toggle this grandchild only\n",
    "            if clicked in active_grandchildren:\n",
    "                active_grandchildren.remove(clicked)\n",
    "            else:\n",
    "                # deactivate other grandchildren under the same parent\n",
    "                for gc in grandchildren_map[parent_child]:\n",
    "                    active_grandchildren.discard(gc)\n",
    "                active_grandchildren.add(clicked)\n",
    "\n",
    "    return build_figure()\n",
    "\n",
    "\n",
    "# ==========================================================\n",
    "# Run inline in Jupyter\n",
    "# ==========================================================\n",
    "if __name__ == \"__main__\":\n",
    "    app.run_server(debug=False, host=\"0.0.0.0\", port=8050)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
